version: '3.7'

services:
  api:
    image: cognigy/api:${TAG_API}
    environment:
      MONGO_ROOT_PASSWORD: run/secrets/mongo-pass
      MONGO_USER: ${DB_USER}
      MONGO_ENDPOINT: mongo:27017
    links:
      - user-management
    depends_on:
      - user-management
      - mongo
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        delay: 20s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        failure_action: continue
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 20s
        max_attempts: 3
        window: 240s
      resources:
        limits:
          memory: 1G
          cpus: '2'
        reservations:
          memory: 512M
          cpus: '1'
      placement:
        preferences:
          - spread: node.labels.zone
        constraints:
          - node.labels.purpose == app
    ports:
      - "5000:5000"
    secrets:
      - mongo-pass

  user-management:
    image: cognigy/user-management:${TAG_UM}
    environment:
      MONGO_ROOT_PASSWORD: run/secrets/mongo-pass
      MONGO_USER: ${DB_USER}
      MONGO_ENDPOINT: mongo:27017
    depends_on:
      - mongo
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        delay: 20s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        failure_action: continue
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 20s
        max_attempts: 3
        window: 240s
      resources:
        limits:
          memory: 1G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'
      placement:
        preferences:
          - spread: node.labels.zone
        constraints:
          - node.labels.purpose == app
    secrets:
      - mongo-pass

  web-frontend:
    image: cognigy/web-frontend:${TAG_WEB}
    deploy:
      mode: replicated
      replicas: 2
      update_config:
        delay: 20s
        failure_action: rollback
        order: start-first
      rollback_config:
        parallelism: 1
        failure_action: continue
        order: start-first
      restart_policy:
        condition: on-failure
        delay: 20s
        max_attempts: 3
        window: 240s
      resources:
        limits:
          memory: 1G
          cpus: '1'
        reservations:
          memory: 512M
          cpus: '0.5'
      placement:
        preferences:
          - spread: node.labels.zone
        constraints:
          - node.labels.purpose == app
    ports:
      - "4000:4000"

  mongo:
    image: mongo
    restart: always
    ports:
    - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_USER}
      MONGO_INITDB_ROOT_PASSWORD: run/secrets/mongo-pass
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.labels.purpose == db 
    volumes:
      - /data/db:/data
    secrets:
      - mongo-pass

  nginx:
    image: nginx:1.17
    ports: 
      - "80:80"
      - "443:443"
    deploy:
      replicas: 2 
      placement:
          preferences:
            - spread: node.labels.zone
          constraints:
            - node.labels.purpose == lb
      volumes:
        - ~/default.conf:/etc/nginx/conf.d/default.conf
      secrets:
        - source: app.cert
          target: /etc/nginx/certs

secrets: 
  mongo-pass:
    external: true
  app.cert:
    file: /cert/app.cert